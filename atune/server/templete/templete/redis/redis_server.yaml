project: "redis"
maxiterations: 100
startworkload: "systemctl start redis"
stopworkload: "ststemctl stop redis"
object:
  - name: "redis.client-timeout"
    info:
      desc: "close idle connections for specific seconds"
      get: grep -P '^timeout' /etc/redis.conf | awk '{print $2}'
      set: sed -i "s/^timeout.*/timeout $value/g" /etc/redis.conf
      needrestart: "true"
      type: "continuous"
      dtype: "int"
      scope:
        - 0
        - 100
      step: 1
      ref: 0
  - name: "redis.tcp-keepalive"
    info:
      desc: "close connections which not respond after specific seconds"
      get: grep -P '^tcp-keepalive' /etc/redis.conf | awk '{print $2}'
      set: sed -i "s/^tcp-keepalive.*/timeout $value/g" /etc/redis.conf
      needrestart: "true"
      type: "continuous"
      dtype: "int"
      scope:
        - 0
        - 300
      step: 1
      ref: 300
  - name: "redis.RDB"
    info:
      desc: "save DB on disk, could be disabled if just for cache."
      get: grep -P '^save' /etc/redis.conf | awk '{print $1 $2}'
      set: if [ "${value}" = "off" ]; then sed -i "s/^save.*/#&/g" /etc/redis.conf; fi
      needrestart: "true"
      type: "discrete"
      dtype: "string"
      options:
        - "on"
        - "off"
  - name: "redis.AOF"
    info:
      desc: "logs every write operation received by the server."
      get: grep -P '^appendonly' /etc/redis.conf | awk '{print $2}'
      set: sed -i "s/^appendonly.*/appendonly $value/g" /etc/redis.conf
      needrestart: "true"
      type: "discrete"
      dtype: "string"
      options:
        - "yes"
        - "no"
      ref: "no"
  - name: "redis.maxmemory"
    info:
      desc: "sets maximum host’s memory limit to be allocated to the Redis."
      get: grep -P '^maxmemory' /etc/redis.conf | awk '{print $2}'
      set: if grep -P '^maxmemory' /etc/redis.conf; then sed  -i "s/^maxmemory.*/maxmemory ${value}gb/g" /etc/redis.conf; else sed -i "/# maxmemory <bytes>/a maxmemory ${value}gb" /etc/redis.conf; fi
      needrestart: "true"
      type: "continuous"
      dtype: "int"
      scope:
        - 0
        - 8
      step: 1
  - name: "redis.unixsocket"
    info:
      desc: "use unix domain sockets to communicate.(benefit when client and server running on same box)"
      get: value="not set"; if grep -P '^maxclients' /etc/redis.conf; then value="$(grep -P '^unixsocket' /etc/redis.conf)"; fi ;echo "${value}"
      set: if [ "$value" = "yes" ]; then sed -i "/# unixsocketperm /a unixsocket /tmp/redis.sock" ./test; sed -i "/^unixsocket /a unixsocketperm 700" ./test; fi
      needrestart: "true"
      type: "discrete"
      dtype: "string"
      options:
        - "no"
        # please add options based on current scenario.
  - name: "redis.loglevel"
    info:
      desc: "Redis loglevel, most detailed and thus more expensive for host’s resources."
      get: grep 'loglevel' /etc/redis.conf | awk '{print $2}'
      set: sed -i "s/^loglevel.*/loglevel $value/g" ./test
      needrestart: "true"
      type: "discrete"
      dtype: "string"
      options:
        - "debug"
        - "verbose"
        - "notice"
        - "warning"
  - name: "sys.kernel.mm.transparent_huagepage"
    info:
      desc: "a Linux memory management system that reduces the overhead of Translation Lookaside Buffer (TLB) lookups on machines with large amounts of memory by using larger memory pages."
      get: grep -o '\[.*\]' /sys/kernel/mm/transparent_hugepage/enabled | tr -d '[]'
      set: sed -i "s/^loglevel.*/loglevel $value/g" ./test
      needrestart: "true"
      type: "discrete"
      dtype: "string"
      options:
        - "always"
        - "madvise"
        - "never"
      ref: "never"
  - name: "redis.maxclient"
    info:
      desc: "maximum concurrent connected clients."
      get: value="not set"; if grep -P '^maxclients' /etc/redis.conf; then value="$(grep -P '^maxclients' /etc/redis.conf)"; fi; echo "${value}"
      set: if grep -P '^maxclients' /etc/redis.conf; then sed -i "s/^maxclients.*/maxclients ${value}" /etc/redis.conf; else sed -i "/# maxclients/a maxclients ${value}" /etc/redis.conf; fi; ulimit -Sn "${value}"; sysctl -w fs.file-max="${value}"
      needrestart: "true"
      type: "continuous"
      dtype: "int"
      scope:
        - 10000
        - 100000
      step: 10000
  - name: "redis.tcp-backlog"
    info:
      desc: "the size of complete connection queue"
      get: cat /etc/redis.conf | grep tcp-backlog | awk '{print $2}'
      set: sysctl net.core.somaxconn="${value}"; sysctl net.ipv4.tcp_max_syn_backlog="${value}"; sed -i "s/tcp-backlog.*/tcp-backlog $value/g" /etc/redis
      needrestart: "true"
      type: "continuous"
      scope:
        - 511
        - 65535
      dtype: "int"
  - name: "redis.databases"
    info:
      desc: "number of databases"
      get: grep -P '^databases' /etc/redis.conf | awk '{print $2}'
      set: sed -i "s/databases.*/databases $value/g" /etc/redis.conf
      needrestart: "true"
      type: "continuous"
      scope:
        - 1
        - 16
      dtype: "int"
  - name: "redis.rdbcompression"
    info:
      desc: "whether compress string objects using LZF when dump .rdb databases"
      get: grep 'rdbcompression' /etc/redis.conf | awk '{print $2}'
      set: sed -i "s/rdbcompression.*/rdbcompression $value/g" /etc/redis.conf
      needrestart: "true"
      type: "discrete"
      options:
        - "yes"
      dtype: "string"
  - name: "redis.supervised"
    info:
      desc: "service supervise"
      get: cat /etc/redis.conf | grep supervised  | awk '{print $2}'
      set: sed -i 's/supervised .*/supervised  $value/g' /etc/redis.conf
      needrestart: "false"
      type: "discrete"
      options:
        - "no"
        - "upstart"
        - "systemd"
        - "auto"
      dtype: "string"
  - name: "net.core.netdev_budget"
    info:
      desc: "Number of network packets processed in each software interrupt"
      get: "sysctl -n net.core.netdev_budget"
      set: "sysctl -w net.core.netdev_budget=$value"
      needrestart: "false"
      type: "discrete"
      scope:
        - 100
        - 1000
      step: 100
      items:
      dtype: "int"
  - name: "net.core.rmem_max"
    info:
      desc: "Maximum system socket read buffer. The default value is 229376. You are advised to change the value to 16777216."
      get: "sysctl -n net.core.rmem_max"
      set: "sysctl -w net.core.rmem_max=$value"
      needrestart: "false"
      type: "discrete"
      scope:
        - 1048576
        - 67108864
      step: 1048576
      items:
      dtype: "int"
  - name: "net.core.somaxconn"
    info:
      desc: "Defines the maximum length of the listening queue of each port in the system. This is a global parameter. The default value is 128. You are advised to change the value to 1024."
      get: "sysctl -n net.core.somaxconn"
      set: "sysctl -w net.core.somaxconn=$value"
      needrestart: "false"
      type: "discrete"
      scope:
        - 128
        - 65536
      step: 128
      items:
      dtype: "int"
  - name: "net.core.optmem_max"
    info:
      desc: "Maximum size of the buffer allowed by each socket(in bytes)."
      get: "sysctl -n net.core.optmem_max"
      set: "sysctl -w net.core.optmem_max=$value"
      needrestart: "false"
      type: "discrete"
      scope:
        - 20480
        - 204800
      step: 20480
      items:
      dtype: "int"
  - name: "kernel.numa_balancing"
    info:
      desc: "Specifies whether to enable NUMA automatic balancing."
      get: "sysctl -n kernel.numa_balancing"
      set: "sysctl -w kernel.numa_balancing=$value"
      needrestart: "false"
      type: "discrete"
      options:
        - "0"
        - "1"
      dtype: "string"
